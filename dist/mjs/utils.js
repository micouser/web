// Generated by CoffeeScript 1.10.0
var p, utils,
  slice = [].slice;

utils = utils || {};

p = utils.test = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return console.log(args);
};

utils.ip = {
  toInt: function(s) {
    var i, j, len, n, ref;
    n = 0;
    ref = s.split(".");
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      n <<= 8;
      n += parseInt(i);
    }
    return n >>> 0;
  },
  fromInt: function(n) {
    var mask;
    mask = 0xFF;
    return (n >>> 24) + "." + (n >> 16 & mask) + "." + (n >> 8 & mask) + "." + (n & mask);
  },
  toMask: function(n) {
    return utils.ip.fromInt(0xFFFFFFFF - (1 << (32 - n)) + 1);
  },
  netRange: function(net) {
    var b, e, m, ref, w;
    ref = net.split("/"), w = ref[0], m = ref[1];
    b = utils.ip.toInt(w);
    e = b + Math.pow(2, 32 - m) - 1;
    return [b, e];
  }
};

utils.ipRange = {
  toArray: function(r) {
    var i, j, len, ref, results;
    ref = r.split("-");
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      i = ref[j];
      results.push(utils.ip.toInt(i));
    }
    return results;
  },
  fromArray: function(a) {
    var i;
    return ((function() {
      var j, len, results;
      results = [];
      for (j = 0, len = a.length; j < len; j++) {
        i = a[j];
        results.push(utils.ip.fromInt(i));
      }
      return results;
    })()).join("-");
  },
  size: function(r) {
    var high, low, ref;
    ref = utils.ipRange.toArray(r), low = ref[0], high = ref[1];
    return high - low + 1;
  }
};
